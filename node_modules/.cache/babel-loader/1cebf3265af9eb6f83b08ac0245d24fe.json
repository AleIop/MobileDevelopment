{"ast":null,"code":"var _jsxFileName = \"/Users/Alessandro/Documents/GitHub/mobut-project/src/components/PlayerMarker.js\";\nimport React from 'react';\nimport { Marker } from 'google-maps-react';\nimport getDistance from 'geolib/es/getDistance';\nimport mixColors from '../utils';\nimport './MapView.css';\nconst COLD_COLOR = 'hsl(60,100%,100%)';\nconst WARM_COLOR = 'hsl(0,100%,50%)';\nconst COLD_DISTANCE = 5000;\nconst WARM_DISTANCE = 20;\nvar interval;\nexport class PlayerMarker extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.props = {\n      targetLocation: {}\n    };\n    this.state = {\n      location: {}\n    };\n\n    this.tagTarget = () => {\n      this.props.removePlayerFromGame(this.props.huntingPlayer);\n\n      if (this.props.playersInGame.length === 2) {\n        this.props.displayToast(\"Congratulation! You Won!\");\n        this.props.endGame();\n      }\n    };\n  }\n\n  updateLocation(loc) {\n    this.setState({\n      location: {\n        lat: loc.coords.latitude,\n        lng: loc.coords.longitude\n      }\n    });\n    this.props.map.panTo({\n      lat: loc.coords.latitude,\n      lng: loc.coords.longitude\n    });\n    console.log('PlayerMarker state: ', this.state, '\\nPlayerMarker props: ', this.props); //this.onLocationUpdate(loc);\n  }\n\n  onErrorGettingLocation(err) {\n    console.log('Unable to get location', err);\n  }\n\n  project(loc) {\n    let google = this.props.google;\n    let sinY = Math.sin(loc.lat * Math.PI / 180);\n    sinY = Math.min(Math.max(sinY, -0.9999), 0.9999);\n    return new google.maps.Point(256 * (0.5 + loc.lng / 360), 256 * (0.5 - Math.log((1 + sinY) / (1 - sinY)) / (4 * Math.PI)));\n  }\n\n  get directionToTarget() {\n    let pos = this.project(this.state.location);\n    let targetPos = this.project(this.props.targetLocation);\n    return Math.atan2(targetPos.y - pos.y, targetPos.x - pos.x) * 180 / Math.PI;\n  }\n\n  get distanceToTarget() {\n    return getDistance({\n      latitude: '' + this.state.location.lat,\n      longitude: '' + this.state.location.lng\n    }, {\n      latitude: '' + this.props.targetLocation.lat,\n      longitude: '' + this.props.targetLocation.lng\n    });\n  }\n\n  get proximityColor() {\n    let d = Math.max(Math.min(this.distanceToTarget, COLD_DISTANCE), WARM_DISTANCE);\n    let t = Math.sqrt((d - WARM_DISTANCE) / (COLD_DISTANCE - WARM_DISTANCE));\n    return mixColors(WARM_COLOR, COLD_COLOR, t);\n  }\n\n  componentDidMount() {\n    let gl = navigator.geolocation;\n    const glOptions = {\n      enableHighAccuracy: true,\n      timeout: 15000,\n      maximumAge: 0\n    };\n    gl.watchPosition(this.updateLocation.bind(this), this.onErrorGettingLocation.bind(this), glOptions);\n    interval = setInterval(() => {\n      if (this.state.location.lat) this.props.publishMyLocation(this.state.location);\n      console.log('My location is: ', this.state.location);\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    console.log(\"PlayerMarker.js Component did unmount\");\n    clearInterval(interval);\n  }\n\n  render() {\n    let google = this.props.google;\n    if (this.distanceToTarget > WARM_DISTANCE) return /*#__PURE__*/React.createElement(Marker, Object.assign({}, this.props, {\n      name: 'Player',\n      position: this.state.location,\n      icon: {\n        path: 'M42,21.002L16.043,0v11.55H0v18.9h16.043V42L42,21.002L42,21.002z',\n        anchor: new google.maps.Point(21, 21),\n        scale: 1.5,\n        strokeWeight: 4,\n        fillColor: this.proximityColor,\n        fillOpacity: 1,\n        rotation: this.directionToTarget\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }));else return /*#__PURE__*/React.createElement(Marker, Object.assign({}, this.props, {\n      name: 'Player',\n      position: this.state.location,\n      icon: {\n        path: google.maps.SymbolPath.CIRCLE,\n        scale: 50,\n        strokeWeight: 6,\n        fillColor: this.proximityColor,\n        fillOpacity: 1\n      },\n      label: {\n        text: 'TAG',\n        fontSize: '36px',\n        fontWeight: 'bold'\n      },\n      onClick: this.tagTarget,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default PlayerMarker;","map":{"version":3,"sources":["/Users/Alessandro/Documents/GitHub/mobut-project/src/components/PlayerMarker.js"],"names":["React","Marker","getDistance","mixColors","COLD_COLOR","WARM_COLOR","COLD_DISTANCE","WARM_DISTANCE","interval","PlayerMarker","Component","props","targetLocation","state","location","tagTarget","removePlayerFromGame","huntingPlayer","playersInGame","length","displayToast","endGame","updateLocation","loc","setState","lat","coords","latitude","lng","longitude","map","panTo","console","log","onErrorGettingLocation","err","project","google","sinY","Math","sin","PI","min","max","maps","Point","directionToTarget","pos","targetPos","atan2","y","x","distanceToTarget","proximityColor","d","t","sqrt","componentDidMount","gl","navigator","geolocation","glOptions","enableHighAccuracy","timeout","maximumAge","watchPosition","bind","setInterval","publishMyLocation","componentWillUnmount","clearInterval","render","path","anchor","scale","strokeWeight","fillColor","fillOpacity","rotation","SymbolPath","CIRCLE","text","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Marker } from 'google-maps-react';\nimport getDistance from 'geolib/es/getDistance';\nimport mixColors from '../utils';\nimport './MapView.css';\n\nconst COLD_COLOR = 'hsl(60,100%,100%)';\nconst WARM_COLOR = 'hsl(0,100%,50%)';\nconst COLD_DISTANCE = 5000;\nconst WARM_DISTANCE = 20;\nvar interval;\n\nexport class PlayerMarker extends React.Component {\n  props = {\n    targetLocation: {}\n  };\n\n  state = {\n    location: {}\n  };\n\n  updateLocation(loc) {\n    this.setState({\n      location: {\n        lat: loc.coords.latitude,\n        lng: loc.coords.longitude\n      }\n    });\n    this.props.map.panTo({\n      lat: loc.coords.latitude,\n      lng: loc.coords.longitude\n    });\n\n    console.log('PlayerMarker state: ', this.state,\n      '\\nPlayerMarker props: ', this.props);\n    //this.onLocationUpdate(loc);\n  }\n\n  onErrorGettingLocation(err) {\n    console.log('Unable to get location', err);\n  }\n\n  project(loc) {\n    let google = this.props.google;\n\n    let sinY = Math.sin(loc.lat * Math.PI / 180);\n    sinY = Math.min(Math.max(sinY, -0.9999), 0.9999);\n\n    return new google.maps.Point(\n      256 * (0.5 + loc.lng / 360),\n      256 * (0.5 - Math.log((1 + sinY) / (1 - sinY)) / (4 * Math.PI))\n    );\n  }\n\n  get directionToTarget() {\n    let pos = this.project(this.state.location);\n    let targetPos = this.project(this.props.targetLocation);\n    return Math.atan2(targetPos.y - pos.y, targetPos.x - pos.x) * 180 / Math.PI;\n  }\n\n  get distanceToTarget() {\n    return getDistance({\n      latitude: '' + this.state.location.lat,\n      longitude: '' + this.state.location.lng\n    }, {\n      latitude: '' + this.props.targetLocation.lat,\n      longitude: '' + this.props.targetLocation.lng\n    });\n  }\n\n  get proximityColor() {\n    let d = Math.max(Math.min(this.distanceToTarget, COLD_DISTANCE), WARM_DISTANCE);\n    let t = Math.sqrt((d - WARM_DISTANCE) / (COLD_DISTANCE - WARM_DISTANCE));\n    return mixColors(WARM_COLOR, COLD_COLOR, t);\n  }\n\n  componentDidMount() {\n    let gl = navigator.geolocation;\n    const glOptions = {\n      enableHighAccuracy: true,\n      timeout: 15000,\n      maximumAge: 0\n    };\n    gl.watchPosition(\n      this.updateLocation.bind(this),\n      this.onErrorGettingLocation.bind(this),\n      glOptions\n    );\n\n    interval = setInterval(() => {\n      if (this.state.location.lat) this.props.publishMyLocation(this.state.location);\n      console.log('My location is: ', this.state.location);\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    console.log(\"PlayerMarker.js Component did unmount\");\n    clearInterval(interval);\n  }\n\n  tagTarget = () => {\n    this.props.removePlayerFromGame(this.props.huntingPlayer);\n    if (this.props.playersInGame.length === 2) {\n      this.props.displayToast(\"Congratulation! You Won!\");\n      this.props.endGame();\n    }\n  }\n\n  render() {\n    let google = this.props.google;\n    if (this.distanceToTarget > WARM_DISTANCE)\n      return (\n        <Marker {...this.props}\n          name={'Player'}\n          position={this.state.location}\n          icon={{\n            path: 'M42,21.002L16.043,0v11.55H0v18.9h16.043V42L42,21.002L42,21.002z',\n            anchor: new google.maps.Point(21, 21),\n            scale: 1.5,\n            strokeWeight: 4,\n            fillColor: this.proximityColor,\n            fillOpacity: 1,\n            rotation: this.directionToTarget\n          }}\n        />\n      );\n    else\n      return (\n        <Marker {...this.props}\n          name={'Player'}\n          position={this.state.location}\n          icon={{\n            path: google.maps.SymbolPath.CIRCLE,\n            scale: 50,\n            strokeWeight: 6,\n            fillColor: this.proximityColor,\n            fillOpacity: 1,\n          }}\n          label={{\n            text: 'TAG',\n            fontSize: '36px',\n            fontWeight: 'bold'\n          }}\n          onClick={this.tagTarget}\n        />\n      );\n  }\n}\n\nexport default PlayerMarker;\n"]},"metadata":{},"sourceType":"module"}