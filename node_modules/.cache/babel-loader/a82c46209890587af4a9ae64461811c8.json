{"ast":null,"code":"import _classCallCheck from\"/Users/Alessandro/Documents/GitHub/mobut-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/Alessandro/Documents/GitHub/mobut-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/Alessandro/Documents/GitHub/mobut-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/Alessandro/Documents/GitHub/mobut-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{Marker}from'google-maps-react';import getDistance from'geolib/es/getDistance';import mixColors from'../utils';import'./MapView.css';var COLD_COLOR='hsl(60,100%,100%)';var WARM_COLOR='hsl(0,100%,50%)';var COLD_DISTANCE=5000;var WARM_DISTANCE=10;var interval;export var PlayerMarker=/*#__PURE__*/function(_React$Component){_inherits(PlayerMarker,_React$Component);var _super=_createSuper(PlayerMarker);function PlayerMarker(){var _this;_classCallCheck(this,PlayerMarker);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={location:{}};return _this;}_createClass(PlayerMarker,[{key:\"updateLocation\",value:function updateLocation(loc){this.setState({location:{lat:loc.coords.latitude,lng:loc.coords.longitude}});this.props.map.panTo({lat:loc.coords.latitude,lng:loc.coords.longitude});//this.onLocationUpdate(loc);\n}},{key:\"onErrorGettingLocation\",value:function onErrorGettingLocation(err){console.log('Unable to get location',err);}},{key:\"project\",value:function project(loc){var google=this.props.google;var sinY=Math.sin(loc.lat*Math.PI/180);sinY=Math.min(Math.max(sinY,-0.9999),0.9999);return new google.maps.Point(256*(0.5+loc.lng/360),256*(0.5-Math.log((1+sinY)/(1-sinY))/(4*Math.PI)));}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var gl=navigator.geolocation;var glOptions={enableHighAccuracy:true,timeout:15000,maximumAge:0};gl.watchPosition(this.updateLocation.bind(this),this.onErrorGettingLocation.bind(this),glOptions);interval=setInterval(function(){_this2.props.publishMyLocation(_this2.state.location);console.log('My target is: ',_this2.state.targetLocation,'\\nDistance to target: ',_this2.distanceToTarget);},10000);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){console.log(\"PlayerMarker.js Component did unmount\");clearInterval(interval);}},{key:\"render\",value:function render(){var google=this.props.google;return/*#__PURE__*/React.createElement(Marker,Object.assign({},this.props,{name:'Player',position:this.state.location,icon:{path:'M42,21.002L16.043,0v11.55H0v18.9h16.043V42L42,21.002L42,21.002z',anchor:new google.maps.Point(21,21),scale:2,strokeWeight:6,fillColor:this.proximityColor,fillOpacity:1,rotation:this.directionToTarget}}));}},{key:\"directionToTarget\",get:function get(){var pos=this.project(this.state.location);var targetPos=this.project(this.props.targetLocation);return Math.atan2(targetPos.y-pos.y,targetPos.x-pos.x)*180/Math.PI;}},{key:\"distanceToTarget\",get:function get(){return getDistance({latitude:''+this.state.location.lat,longitude:''+this.state.location.lng},{latitude:''+this.props.targetLocation.lat,longitude:''+this.props.targetLocation.lng});}},{key:\"proximityColor\",get:function get(){var d=Math.max(Math.min(this.distanceToTarget,COLD_DISTANCE),WARM_DISTANCE);var t=Math.sqrt((d-WARM_DISTANCE)/(COLD_DISTANCE-WARM_DISTANCE));return mixColors(WARM_COLOR,COLD_COLOR,t);}}]);return PlayerMarker;}(React.Component);export default PlayerMarker;","map":{"version":3,"sources":["/Users/Alessandro/Documents/GitHub/mobut-project/src/components/PlayerMarker.js"],"names":["React","Marker","getDistance","mixColors","COLD_COLOR","WARM_COLOR","COLD_DISTANCE","WARM_DISTANCE","interval","PlayerMarker","state","location","loc","setState","lat","coords","latitude","lng","longitude","props","map","panTo","err","console","log","google","sinY","Math","sin","PI","min","max","maps","Point","gl","navigator","geolocation","glOptions","enableHighAccuracy","timeout","maximumAge","watchPosition","updateLocation","bind","onErrorGettingLocation","setInterval","publishMyLocation","targetLocation","distanceToTarget","clearInterval","path","anchor","scale","strokeWeight","fillColor","proximityColor","fillOpacity","rotation","directionToTarget","pos","project","targetPos","atan2","y","x","d","t","sqrt","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Marker } from 'google-maps-react';\nimport getDistance from 'geolib/es/getDistance';\nimport mixColors from '../utils';\nimport './MapView.css';\n\nconst COLD_COLOR = 'hsl(60,100%,100%)';\nconst WARM_COLOR = 'hsl(0,100%,50%)';\nconst COLD_DISTANCE = 5000;\nconst WARM_DISTANCE = 10;\nvar interval;\n\nexport class PlayerMarker extends React.Component {\n  state = {\n    location: {}\n  };\n\n  updateLocation(loc) {\n    this.setState({\n      location: {\n        lat: loc.coords.latitude,\n        lng: loc.coords.longitude\n      }\n    });\n    this.props.map.panTo({\n      lat: loc.coords.latitude,\n      lng: loc.coords.longitude\n    });\n\n    //this.onLocationUpdate(loc);\n  }\n\n  onErrorGettingLocation(err) {\n    console.log('Unable to get location', err);\n  }\n\n  project(loc) {\n    let google = this.props.google;\n\n    let sinY = Math.sin(loc.lat * Math.PI / 180);\n    sinY = Math.min(Math.max(sinY, -0.9999), 0.9999);\n\n    return new google.maps.Point(\n      256 * (0.5 + loc.lng / 360),\n      256 * (0.5 - Math.log((1 + sinY) / (1 - sinY)) / (4 * Math.PI))\n    );\n  }\n\n  get directionToTarget() {\n    let pos = this.project(this.state.location);\n    let targetPos = this.project(this.props.targetLocation);\n    return Math.atan2(targetPos.y - pos.y, targetPos.x - pos.x) * 180 / Math.PI;\n  }\n\n  get distanceToTarget() {\n    return getDistance({\n      latitude: '' + this.state.location.lat,\n      longitude: '' + this.state.location.lng\n    }, {\n      latitude: '' + this.props.targetLocation.lat,\n      longitude: '' + this.props.targetLocation.lng\n    });\n  }\n\n  get proximityColor() {\n    let d = Math.max(Math.min(this.distanceToTarget, COLD_DISTANCE), WARM_DISTANCE);\n    let t = Math.sqrt((d - WARM_DISTANCE) / (COLD_DISTANCE - WARM_DISTANCE));\n    return mixColors(WARM_COLOR, COLD_COLOR, t);\n  }\n\n  componentDidMount() {\n    let gl = navigator.geolocation;\n    const glOptions = {\n      enableHighAccuracy: true,\n      timeout: 15000,\n      maximumAge: 0\n    };\n    gl.watchPosition(\n      this.updateLocation.bind(this),\n      this.onErrorGettingLocation.bind(this),\n      glOptions\n    );\n\n    interval = setInterval(() => {\n      this.props.publishMyLocation(this.state.location);\n      console.log('My target is: ', this.state.targetLocation,\n        '\\nDistance to target: ', this.distanceToTarget);\n    }, 10000);\n  }\n\n  componentWillUnmount(){\n    console.log(\"PlayerMarker.js Component did unmount\");\n    clearInterval(interval);\n  }\n\n  render() {\n    let google = this.props.google;\n    return (\n      <Marker {...this.props}\n        name={'Player'}\n        position={this.state.location}\n        icon={{\n          path: 'M42,21.002L16.043,0v11.55H0v18.9h16.043V42L42,21.002L42,21.002z',\n          anchor: new google.maps.Point(21, 21),\n          scale: 2,\n          strokeWeight: 6,\n          fillColor: this.proximityColor,\n          fillOpacity: 1,\n          rotation: this.directionToTarget\n        }}\n      />\n    );\n  }\n}\n\nexport default PlayerMarker;\n"]},"metadata":{},"sourceType":"module"}