{"ast":null,"code":"var _jsxFileName = \"/Users/Alessandro/Documents/GitHub/mobut-project/src/components/MapView.js\";\nimport React from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nimport PlayerMarker from './PlayerMarker.js';\nimport './MapView.css';\nimport PubNubReact from 'pubnub-react';\nimport { Redirect } from 'react-router-dom';\nexport class MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myLocation: {\n        lat: 0,\n        lng: 0\n      },\n      targetLocation: {\n        lat: 0,\n        lng: 0\n      },\n      redirect: false\n    };\n    this.target = null;\n\n    this.publishMyLocation = loc => {\n      //console.log('this.props :>> ', this.state);\n      //console.log('loc :>> ', loc);\n      this.pubnub.publish({\n        message: {\n          user: this.props.user,\n          userLocation: loc\n        },\n        channel: 'positionChannel'\n      });\n    };\n\n    this.displayToast = message => {\n      this.props.updateToastMessage(message);\n\n      if (!this.props.debounceToast) {\n        this.props.openToast();\n      }\n    };\n\n    this.endGame = () => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.renderRedirect = () => {\n      if (this.state.redirect) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          push: true,\n          to: {\n            pathname: '/lobby',\n            state: {}\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 14\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: 'pub-c-c72ffc95-6f42-4bdf-8a95-04015fd20d32',\n      subscribeKey: 'sub-c-ea26bb44-92b6-11ea-8dc6-429c98eb9bb1'\n    });\n    this.pubnub.init(this);\n  } // componentDidMount(){\n  //   window.onunload = () => {\n  //     this.props.removePlayerFromGame(this.state.user);\n  //     //TODO redirect to another component\n  //     //enable user to get back in the game\n  //   };\n  //   window.onpopstate = () => {\n  //       this.props.removePlayerFromGame(this.state.user);\n  //   };\n  //\n  //   console.log(\"MapView did mount\")\n  //     this.pubnub.subscribe({\n  //         channels: ['positionChannel'],\n  //         withPresence: true\n  //     });\n  //\n  //     // Listening to 'positionChannel'\n  //     this.pubnub.getMessage('positionChannel', (msg) => {\n  //         console.log('msg :>> ',\n  //             msg,\n  //             '\\nstate :>> ',\n  //             this.state,\n  //             '\\nProps: ',\n  //             this.props);\n  //         if (this.props.huntingPlayer.playerId === msg.message.user.playerId) {\n  //             this.setState({\n  //                 targetLocation: msg.message.userLocation,\n  //             })\n  //         }\n  //     });\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    console.log('from mapview THIS.PROPS :>> ', this.props);\n\n    if (!this.props.playerInGame) {\n      this.displayToast(\"You lost!!!\");\n      this.endGame();\n    }\n\n    if (previousProps.huntingPlayer !== this.props.huntingPlayer) console.log('Current props: ', this.props);\n  }\n\n  componentWillUnmount() {\n    this.props.removePlayerFromGame(this.props.user);\n  }\n\n  render() {\n    if (!this.props.loaded) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, \"Loading...\");\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, this.renderRedirect(), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      initialCenter: {\n        lat: 59.329323,\n        lng: 18.068581\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Marker, Object.assign({}, this.props, {\n      ref: element => {\n        if (element) this.target = element.marker;\n      },\n      name: 'Target',\n      position: this.state.targetLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(PlayerMarker, Object.assign({}, this.props, {\n      targetLocation: this.state.targetLocation,\n      publishMyLocation: this.publishMyLocation,\n      endGame: this.endGame,\n      displayToast: this.displayToast // removePlayerFromGame={this.props.removePlayerFromGame}\n      // onChange={this.eventhandler}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyD-HO6pALPiY9nrniME6UmHy3P3YUCv2Eg'\n})(MapView);","map":{"version":3,"sources":["/Users/Alessandro/Documents/GitHub/mobut-project/src/components/MapView.js"],"names":["React","Map","Marker","InfoWindow","GoogleApiWrapper","PlayerMarker","PubNubReact","Redirect","MapView","Component","constructor","props","state","myLocation","lat","lng","targetLocation","redirect","target","publishMyLocation","loc","pubnub","publish","message","user","userLocation","channel","displayToast","updateToastMessage","debounceToast","openToast","endGame","setState","renderRedirect","pathname","publishKey","subscribeKey","init","componentDidUpdate","previousProps","console","log","playerInGame","huntingPlayer","componentWillUnmount","removePlayerFromGame","render","loaded","google","element","marker","apiKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,gBAAlC,QAA0D,mBAA1D;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAO,eAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAGA,OAAO,MAAMC,OAAN,SAAsBR,KAAK,CAACS,SAA5B,CAAsC;AAe3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAbnBC,KAamB,GAbX;AACNC,MAAAA,UAAU,EAAE;AACVC,QAAAA,GAAG,EAAE,CADK;AAEVC,QAAAA,GAAG,EAAE;AAFK,OADN;AAKNC,MAAAA,cAAc,EAAE;AACdF,QAAAA,GAAG,EAAE,CADS;AAEdC,QAAAA,GAAG,EAAE;AAFS,OALV;AASNE,MAAAA,QAAQ,EAAE;AATJ,KAaW;AAAA,SAFnBC,MAEmB,GAFV,IAEU;;AAAA,SAyCnBC,iBAzCmB,GAyCEC,GAAD,IAAS;AAC3B;AACA;AACA,WAAKC,MAAL,CAAYC,OAAZ,CAAoB;AAClBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,IADV;AAEPC,UAAAA,YAAY,EAAEL;AAFP,SADS;AAKlBM,QAAAA,OAAO,EAAE;AALS,OAApB;AAOD,KAnDkB;;AAAA,SAqDnBC,YArDmB,GAqDHJ,OAAD,IAAa;AAC1B,WAAKZ,KAAL,CAAWiB,kBAAX,CAA8BL,OAA9B;;AACA,UAAI,CAAE,KAAKZ,KAAL,CAAWkB,aAAjB,EAAiC;AAC/B,aAAKlB,KAAL,CAAWmB,SAAX;AACD;AACF,KA1DkB;;AAAA,SA0EnBC,OA1EmB,GA0ET,MAAK;AACb,WAAKC,QAAL,CAAc;AAAEf,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KA5EkB;;AAAA,SA8EnBgB,cA9EmB,GA8EF,MAAM;AACrB,UAAI,KAAKrB,KAAL,CAAWK,QAAf,EAAyB;AACvB,4BAAO,oBAAC,QAAD;AAAU,UAAA,IAAI,MAAd;AAAe,UAAA,EAAE,EAAE;AACxBiB,YAAAA,QAAQ,EAAE,QADc;AAExBtB,YAAAA,KAAK,EAAE;AAFiB,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,OAPD,MAOO;AACL,4BAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAzFkB;;AAEjB,SAAKS,MAAL,GAAc,IAAIf,WAAJ,CAAgB;AAC5B6B,MAAAA,UAAU,EAAE,4CADgB;AAE5BC,MAAAA,YAAY,EAAE;AAFc,KAAhB,CAAd;AAIA,SAAKf,MAAL,CAAYgB,IAAZ,CAAiB,IAAjB;AACD,GAtB0C,CAwB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAsBAC,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAK9B,KAAjD;;AACA,QAAI,CAAC,KAAKA,KAAL,CAAW+B,YAAhB,EAA8B;AAC5B,WAAKf,YAAL,CAAkB,aAAlB;AACA,WAAKI,OAAL;AACD;;AACD,QAAIQ,aAAa,CAACI,aAAd,KAAgC,KAAKhC,KAAL,CAAWgC,aAA/C,EAA8DH,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAK9B,KAApC;AAC/D;;AAEDiC,EAAAA,oBAAoB,GAAG;AACrB,SAAKjC,KAAL,CAAWkC,oBAAX,CAAgC,KAAKlC,KAAL,CAAWa,IAA3C;AACD;;AAoBDsB,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKnC,KAAL,CAAWoC,MAAhB,EACE,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAIF,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKd,cAAL,EADH,eAEE,oBAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKtB,KAAL,CAAWqC,MADrB;AAEE,MAAA,IAAI,EAAE,EAFR;AAGE,MAAA,aAAa,EAAE;AACblC,QAAAA,GAAG,EAAE,SADQ;AAEbC,QAAAA,GAAG,EAAE;AAFQ,OAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE,oBAAC,MAAD,oBAAY,KAAKJ,KAAjB;AACE,MAAA,GAAG,EAAEsC,OAAO,IAAI;AACd,YAAIA,OAAJ,EACE,KAAK/B,MAAL,GAAc+B,OAAO,CAACC,MAAtB;AACH,OAJH;AAKE,MAAA,IAAI,EAAE,QALR;AAME,MAAA,QAAQ,EAAE,KAAKtC,KAAL,CAAWI,cANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OARF,eAgBE,oBAAC,YAAD,oBAAkB,KAAKL,KAAvB;AACE,MAAA,cAAc,EAAE,KAAKC,KAAL,CAAWI,cAD7B;AAEE,MAAA,iBAAiB,EAAE,KAAKG,iBAF1B;AAGE,MAAA,OAAO,EAAE,KAAKY,OAHhB;AAIE,MAAA,YAAY,EAAE,KAAKJ,YAJrB,CAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhBF,CAFF,CADF;AA8BD;;AA/I0C;AAkJ7C,eAAevB,gBAAgB,CAAC;AAC9B+C,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZ3C,OAFY,CAAf","sourcesContent":["import React from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nimport PlayerMarker from './PlayerMarker.js';\nimport './MapView.css';\nimport PubNubReact from 'pubnub-react';\nimport { Redirect } from 'react-router-dom';\n\n\nexport class MapView extends React.Component {\n\n  state = {\n    myLocation: {\n      lat: 0,\n      lng: 0\n    },\n    targetLocation: {\n      lat: 0,\n      lng: 0\n    },\n    redirect: false,\n  }\n  target = null;\n\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: 'pub-c-c72ffc95-6f42-4bdf-8a95-04015fd20d32',\n      subscribeKey: 'sub-c-ea26bb44-92b6-11ea-8dc6-429c98eb9bb1'\n    });\n    this.pubnub.init(this);\n  }\n\n  // componentDidMount(){\n  //   window.onunload = () => {\n  //     this.props.removePlayerFromGame(this.state.user);\n  //     //TODO redirect to another component\n  //     //enable user to get back in the game\n  //   };\n  //   window.onpopstate = () => {\n  //       this.props.removePlayerFromGame(this.state.user);\n  //   };\n  //\n  //   console.log(\"MapView did mount\")\n  //     this.pubnub.subscribe({\n  //         channels: ['positionChannel'],\n  //         withPresence: true\n  //     });\n  //\n  //     // Listening to 'positionChannel'\n  //     this.pubnub.getMessage('positionChannel', (msg) => {\n  //         console.log('msg :>> ',\n  //             msg,\n  //             '\\nstate :>> ',\n  //             this.state,\n  //             '\\nProps: ',\n  //             this.props);\n  //         if (this.props.huntingPlayer.playerId === msg.message.user.playerId) {\n  //             this.setState({\n  //                 targetLocation: msg.message.userLocation,\n  //             })\n  //         }\n  //     });\n  // }\n\n  publishMyLocation = (loc) => {\n    //console.log('this.props :>> ', this.state);\n    //console.log('loc :>> ', loc);\n    this.pubnub.publish({\n      message: {\n        user: this.props.user,\n        userLocation: loc\n      },\n      channel: 'positionChannel'\n    });\n  }\n\n  displayToast = (message) => {\n    this.props.updateToastMessage(message);\n    if (!(this.props.debounceToast)) {\n      this.props.openToast();\n    }\n  };\n\n\n  componentDidUpdate(previousProps) {\n    console.log('from mapview THIS.PROPS :>> ', this.props);\n    if (!this.props.playerInGame) {\n      this.displayToast(\"You lost!!!\");\n      this.endGame();\n    }\n    if (previousProps.huntingPlayer !== this.props.huntingPlayer) console.log('Current props: ', this.props);\n  }\n\n  componentWillUnmount() {\n    this.props.removePlayerFromGame(this.props.user);\n  }\n\n  endGame = () =>{\n    this.setState({ redirect: true });\n  }\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect push to={{\n        pathname: '/lobby',\n        state: {\n\n        }\n      }} />\n    } else {\n      return <React.Fragment />\n    }\n  };\n\n\n  render() {\n    if (!this.props.loaded)\n      return (\n        <div>Loading...</div>\n      );\n\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <Map\n          google={this.props.google}\n          zoom={14}\n          initialCenter={{\n            lat: 59.329323,\n            lng: 18.068581\n          }}\n        >\n          <Marker {...this.props}\n            ref={element => {\n              if (element)\n                this.target = element.marker;\n            }}\n            name={'Target'}\n            position={this.state.targetLocation}\n          />\n          <PlayerMarker {...this.props}\n            targetLocation={this.state.targetLocation}\n            publishMyLocation={this.publishMyLocation}\n            endGame={this.endGame}\n            displayToast={this.displayToast}\n          // removePlayerFromGame={this.props.removePlayerFromGame}\n          // onChange={this.eventhandler}\n          />\n        </Map>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyD-HO6pALPiY9nrniME6UmHy3P3YUCv2Eg')\n})(MapView)\n"]},"metadata":{},"sourceType":"module"}