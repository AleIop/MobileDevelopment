{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBXCX1Bb5S3OeJSmPsGr9B2J6iS9LVs2pQ\",\n  authDomain: \"mobut-project.firebaseapp.com\",\n  databaseURL: \"https://mobut-project.firebaseio.com\",\n  projectId: \"mobut-project\",\n  storageBucket: \"mobut-project.appspot.com\",\n  messagingSenderId: \"685766846531\",\n  appId: \"1:685766846531:web:39b5f7b9d38e6c22fdccf6\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // Listener for the players in the lobby\n\nlet lobbyListener;\n\nfunction addPlayerToLobby(player_name, url) {\n  let player_id = player_name.replace(/\\s/g, '_');\n  return firebase.firestore().collection('lobby').doc(player_id).set({\n    playerName: player_name,\n    playerId: player_id,\n    imgURL: url,\n    ready: false\n  }).catch(function (error) {\n    console.error('Error adding a player to the lobby', error);\n  });\n}\n\nfunction stopListeningToLobby() {\n  if (lobbyListener !== undefined) {\n    lobbyListener();\n  }\n}\n\nfunction ListenToPlayersInLobby(callback) {\n  lobbyListener = firebase.firestore().collection(\"lobby\").onSnapshot(function (querySnapshot) {\n    var playersInLobby = [];\n    querySnapshot.forEach(function (doc) {\n      playersInLobby.push(doc.data());\n    });\n    callback(playersInLobby);\n  }, function onError(error) {\n    console.error(\"Error listening to lobby: \", error);\n  });\n}\n\nasync function getPlayersInLobby() {\n  var playersInLobby = [];\n  await firebase.firestore().collection(\"lobby\").get().then(querySnapshot => {\n    querySnapshot.forEach(function (doc) {\n      playersInLobby.push(doc.data());\n    });\n  });\n  console.log('Players', playersInLobby);\n  return playersInLobby;\n}\n\nfunction getPlayersInGame(game_id) {\n  return firebase.firestore().collection(\"games\").doc(game_id).get();\n}\n\nfunction removePlayerFromLobby(player_id) {\n  firebase.firestore().collection(\"lobby\").doc(player_id).delete().then(function () {\n    console.log(\"Player succesfully removed!\");\n  }).catch(function (error) {\n    console.error(\"Error removing lobby: \", error);\n  });\n}\n\nfunction removePlayerFromGame(game_id, player_id) {\n  getPlayersInGame(game_id).then(function (game) {\n    let players = game.players;\n    let new_players = [];\n    players.forEach(player => {\n      if (player.playerId !== player_id) {\n        new_players.push(player);\n      }\n    });\n    firebase.firestore().collection('games').doc(game_id).set({\n      players: new_players\n    }).then(function (docRef) {\n      console.log(\"Successfully removed the player with id: \", player_id);\n    }).catch(function (error) {\n      console.error('Error removing the player with id', player_id, \" error: \", error);\n    });\n  });\n}\n\nfunction removePlayersInLobby(playersInLobby) {\n  playersInLobby.forEach(function (player) {\n    removePlayerFromLobby(player.playerId);\n  });\n}\n\nfunction addPlayersToNewGame(playersInLobby) {\n  firebase.firestore().collection('games').add({\n    players: playersInLobby\n  }).then(function (docRef) {\n    console.log(\"Successfully added players to newly created game with ID: \", docRef.id);\n    return playersInLobby;\n  }).catch(function (error) {\n    console.error('Error adding players to new game', error);\n  });\n}\n\nfunction createNewGame() {\n  return getPlayersInLobby().then(function (lobby) {\n    console.log('lobby :', lobby);\n    var playersInLobby = [];\n    lobby.forEach(function (doc) {\n      playersInLobby.push(doc.data());\n    });\n    console.log(\"players in lobby:\", playersInLobby);\n    return playersInLobby;\n  }).then(addPlayersToNewGame).then(removePlayersInLobby).catch(function (error) {\n    console.error(\"Error creating a new game:\", error);\n  });\n}\n\nfunction setPlayerReadyStatus(player_id, status) {\n  firebase.firestore().collection('lobby').doc(player_id).update({\n    ready: status\n  }).catch(error => {\n    console.error('Error setting the player ready status', error);\n  });\n}\n\nfunction createFakeLobby() {\n  addPlayerToLobby(\"DJ COW\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/0/06/MushCow2.jpeg/revision/latest?cb=20190803151753');\n  addPlayerToLobby(\"Bengt\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/e/e7/4C2C755B-FB01-4351-886E-077F5B03CF16.jpeg/revision/latest?cb=20190811175416');\n  addPlayerToLobby(\"Sven\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/d/dd/Sven.png/revision/latest?cb=20191130204116');\n  addPlayerToLobby(\"Sven's BF\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/b/ba/SvenYellow.jpeg/revision/latest?cb=20190814205003');\n  addPlayerToLobby(\"Water Sheep\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/d/db/Water_Sheep%27s_Return.png/revision/latest?cb=20191129235246');\n  addPlayerToLobby(\"Ulla Britta\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/6/6d/BCBBA22C-0452-4B35-8C67-52F8345D734F.jpeg/revision/latest?cb=20190805181119');\n  addPlayerToLobby(\"Flip Flop\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/c/c7/Flip_Flop.jpeg/revision/latest?cb=20190922230718');\n} // Signs-in Friendly Chat.\n\n\nfunction signIn() {\n  // Sign into Firebase using popup auth & Google as the identity provider.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n} // Signs-out of Friendly Chat.\n\n\nfunction signOut() {\n  // Sign out of Firebase.\n  firebase.auth().signOut();\n} // Initiate Firebase Auth.\n\n\nfunction initFirebaseAuth() {\n  // Listen to auth state changes.\n  firebase.auth().onAuthStateChanged(authStateObserver);\n} // Triggers when the auth state change for instance when the user signs-in or signs-out.\n\n\nfunction authStateObserver(user) {\n  if (user) {\n    // User is signed in!\n    console.log({\n      user\n    }, ' signed in');\n  } else {// User is signed out!\n  }\n} // TODO: any functions to handle the end of a game?\n\n\nexport { createNewGame, addPlayerToLobby, createFakeLobby, ListenToPlayersInLobby, getPlayersInLobby, setPlayerReadyStatus, stopListeningToLobby, signIn, signOut, initFirebaseAuth };","map":{"version":3,"sources":["/Users/Alessandro/Documents/GitHub/mobut-project/src/components/firebase-database.component.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","lobbyListener","addPlayerToLobby","player_name","url","player_id","replace","firestore","collection","doc","set","playerName","playerId","imgURL","ready","catch","error","console","stopListeningToLobby","undefined","ListenToPlayersInLobby","callback","onSnapshot","querySnapshot","playersInLobby","forEach","push","data","onError","getPlayersInLobby","get","then","log","getPlayersInGame","game_id","removePlayerFromLobby","delete","removePlayerFromGame","game","players","new_players","player","docRef","removePlayersInLobby","addPlayersToNewGame","add","id","createNewGame","lobby","setPlayerReadyStatus","status","update","createFakeLobby","signIn","provider","auth","GoogleAuthProvider","signInWithPopup","signOut","initFirebaseAuth","onAuthStateChanged","authStateObserver","user"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,+BAFO;AAGnBC,EAAAA,WAAW,EAAE,sCAHM;AAInBC,EAAAA,SAAS,EAAE,eAJQ;AAKnBC,EAAAA,aAAa,EAAE,2BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE;AAPY,CAAvB,C,CAUA;;AACAR,QAAQ,CAACS,aAAT,CAAuBR,cAAvB,E,CAEA;;AACA,IAAIS,aAAJ;;AAIA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,GAAvC,EAA4C;AACxC,MAAIC,SAAS,GAAGF,WAAW,CAACG,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAAhB;AAEA,SAAOf,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CJ,SAA7C,EAAwDK,GAAxD,CAA4D;AAC/DC,IAAAA,UAAU,EAAER,WADmD;AAE/DS,IAAAA,QAAQ,EAAEP,SAFqD;AAG/DQ,IAAAA,MAAM,EAAET,GAHuD;AAI/DU,IAAAA,KAAK,EAAE;AAJwD,GAA5D,EAMFC,KANE,CAMI,UAAUC,KAAV,EAAiB;AACpBC,IAAAA,OAAO,CAACD,KAAR,CAAc,oCAAd,EAAoDA,KAApD;AACH,GARE,CAAP;AASH;;AAED,SAASE,oBAAT,GAAgC;AAC5B,MAAIjB,aAAa,KAAKkB,SAAtB,EAAiC;AAC7BlB,IAAAA,aAAa;AAChB;AACJ;;AAED,SAASmB,sBAAT,CAAgCC,QAAhC,EAA0C;AACtCpB,EAAAA,aAAa,GAAGV,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCc,UAAzC,CAAoD,UAAUC,aAAV,EAAyB;AACzF,QAAIC,cAAc,GAAG,EAArB;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAsB,UAAUhB,GAAV,EAAe;AACjCe,MAAAA,cAAc,CAACE,IAAf,CAAoBjB,GAAG,CAACkB,IAAJ,EAApB;AACH,KAFD;AAGAN,IAAAA,QAAQ,CAACG,cAAD,CAAR;AACH,GANe,EAMb,SAASI,OAAT,CAAiBZ,KAAjB,EAAwB;AACvBC,IAAAA,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;AACH,GARe,CAAhB;AASH;;AAED,eAAea,iBAAf,GAAmC;AAC/B,MAAIL,cAAc,GAAG,EAArB;AACA,QAAMjC,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCsB,GAAzC,GAA+CC,IAA/C,CAAoDR,aAAa,IAAI;AACvEA,IAAAA,aAAa,CAACE,OAAd,CAAsB,UAAUhB,GAAV,EAAe;AACjCe,MAAAA,cAAc,CAACE,IAAf,CAAoBjB,GAAG,CAACkB,IAAJ,EAApB;AACH,KAFD;AAGH,GAJK,CAAN;AAKAV,EAAAA,OAAO,CAACe,GAAR,CAAY,SAAZ,EAAuBR,cAAvB;AACA,SAAOA,cAAP;AACH;;AAED,SAASS,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAO3C,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CyB,OAA7C,EAAsDJ,GAAtD,EAAP;AACH;;AAED,SAASK,qBAAT,CAA+B9B,SAA/B,EAA0C;AACtCd,EAAAA,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CJ,SAA7C,EAAwD+B,MAAxD,GAAiEL,IAAjE,CAAsE,YAAY;AAC9Ed,IAAAA,OAAO,CAACe,GAAR,CAAY,6BAAZ;AACH,GAFD,EAEGjB,KAFH,CAES,UAAUC,KAAV,EAAiB;AACtBC,IAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACH,GAJD;AAKH;;AAED,SAASqB,oBAAT,CAA8BH,OAA9B,EAAuC7B,SAAvC,EAAkD;AAE9C4B,EAAAA,gBAAgB,CAACC,OAAD,CAAhB,CACKH,IADL,CACU,UAAUO,IAAV,EAAgB;AAClB,QAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,QAAIC,WAAW,GAAG,EAAlB;AACAD,IAAAA,OAAO,CAACd,OAAR,CAAgBgB,MAAM,IAAI;AACtB,UAAIA,MAAM,CAAC7B,QAAP,KAAoBP,SAAxB,EAAmC;AAC/BmC,QAAAA,WAAW,CAACd,IAAZ,CAAiBe,MAAjB;AACH;AACJ,KAJD;AAKAlD,IAAAA,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CyB,OAA7C,EAAsDxB,GAAtD,CAA0D;AACtD6B,MAAAA,OAAO,EAAEC;AAD6C,KAA1D,EAGKT,IAHL,CAGU,UAAUW,MAAV,EAAkB;AACpBzB,MAAAA,OAAO,CAACe,GAAR,CAAY,2CAAZ,EAAyD3B,SAAzD;AACH,KALL,EAMKU,KANL,CAMW,UAAUC,KAAV,EAAiB;AACpBC,MAAAA,OAAO,CAACD,KAAR,CAAc,mCAAd,EAAmDX,SAAnD,EAA8D,UAA9D,EAA0EW,KAA1E;AACH,KARL;AASH,GAlBL;AAmBH;;AAGD,SAAS2B,oBAAT,CAA8BnB,cAA9B,EAA8C;AAC1CA,EAAAA,cAAc,CAACC,OAAf,CAAuB,UAAUgB,MAAV,EAAkB;AACrCN,IAAAA,qBAAqB,CAACM,MAAM,CAAC7B,QAAR,CAArB;AACH,GAFD;AAGH;;AAED,SAASgC,mBAAT,CAA6BpB,cAA7B,EAA6C;AACzCjC,EAAAA,QAAQ,CAACgB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCqC,GAAzC,CAA6C;AACzCN,IAAAA,OAAO,EAAEf;AADgC,GAA7C,EAGKO,IAHL,CAGU,UAAUW,MAAV,EAAkB;AACpBzB,IAAAA,OAAO,CAACe,GAAR,CAAY,4DAAZ,EAA0EU,MAAM,CAACI,EAAjF;AACA,WAAOtB,cAAP;AACH,GANL,EAOKT,KAPL,CAOW,UAAUC,KAAV,EAAiB;AACpBC,IAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACH,GATL;AAUH;;AAED,SAAS+B,aAAT,GAAyB;AACrB,SAAOlB,iBAAiB,GACnBE,IADE,CACG,UAAUiB,KAAV,EAAiB;AACnB/B,IAAAA,OAAO,CAACe,GAAR,CAAY,SAAZ,EAAuBgB,KAAvB;AACA,QAAIxB,cAAc,GAAG,EAArB;AACAwB,IAAAA,KAAK,CAACvB,OAAN,CAAc,UAAUhB,GAAV,EAAe;AACzBe,MAAAA,cAAc,CAACE,IAAf,CAAoBjB,GAAG,CAACkB,IAAJ,EAApB;AACH,KAFD;AAGAV,IAAAA,OAAO,CAACe,GAAR,CAAY,mBAAZ,EAAiCR,cAAjC;AACA,WAAOA,cAAP;AACH,GATE,EAUFO,IAVE,CAUGa,mBAVH,EAWFb,IAXE,CAWGY,oBAXH,EAYF5B,KAZE,CAYI,UAAUC,KAAV,EAAiB;AACpBC,IAAAA,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;AACH,GAdE,CAAP;AAgBH;;AAED,SAASiC,oBAAT,CAA8B5C,SAA9B,EAAyC6C,MAAzC,EAAiD;AAC7C3D,EAAAA,QAAQ,CAACgB,SAAT,GACKC,UADL,CACgB,OADhB,EAEKC,GAFL,CAESJ,SAFT,EAGK8C,MAHL,CAGY;AACJrC,IAAAA,KAAK,EAAEoC;AADH,GAHZ,EAMKnC,KANL,CAMYC,KAAD,IAAS;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACH,GARL;AAUH;;AAED,SAASoC,eAAT,GAA2B;AACvBlD,EAAAA,gBAAgB,CAAC,QAAD,EAAW,oHAAX,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,OAAD,EAAU,gJAAV,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,MAAD,EAAS,+GAAT,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,WAAD,EAAc,sHAAd,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,aAAD,EAAgB,iIAAhB,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,aAAD,EAAgB,gJAAhB,CAAhB;AACAA,EAAAA,gBAAgB,CAAC,WAAD,EAAc,qHAAd,CAAhB;AACH,C,CAED;;;AACA,SAASmD,MAAT,GAAkB;AACd;AACA,MAAIC,QAAQ,GAAG,IAAI/D,QAAQ,CAACgE,IAAT,CAAcC,kBAAlB,EAAf;AACAjE,EAAAA,QAAQ,CAACgE,IAAT,GAAgBE,eAAhB,CAAgCH,QAAhC;AACH,C,CAED;;;AACA,SAASI,OAAT,GAAmB;AACf;AACAnE,EAAAA,QAAQ,CAACgE,IAAT,GAAgBG,OAAhB;AACH,C,CAED;;;AACA,SAASC,gBAAT,GAA4B;AACxB;AACApE,EAAAA,QAAQ,CAACgE,IAAT,GAAgBK,kBAAhB,CAAmCC,iBAAnC;AACH,C,CAED;;;AACA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,MAAIA,IAAJ,EAAU;AAAE;AACR7C,IAAAA,OAAO,CAACe,GAAR,CAAY;AAAC8B,MAAAA;AAAD,KAAZ,EAAoB,YAApB;AACH,GAFD,MAEO,CAAE;AAER;AACJ,C,CAED;;;AAOA,SACIf,aADJ,EAEI7C,gBAFJ,EAGIkD,eAHJ,EAIIhC,sBAJJ,EAKIS,iBALJ,EAMIoB,oBANJ,EAOI/B,oBAPJ,EAQImC,MARJ,EASIK,OATJ,EAUIC,gBAVJ","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBXCX1Bb5S3OeJSmPsGr9B2J6iS9LVs2pQ\",\n    authDomain: \"mobut-project.firebaseapp.com\",\n    databaseURL: \"https://mobut-project.firebaseio.com\",\n    projectId: \"mobut-project\",\n    storageBucket: \"mobut-project.appspot.com\",\n    messagingSenderId: \"685766846531\",\n    appId: \"1:685766846531:web:39b5f7b9d38e6c22fdccf6\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Listener for the players in the lobby\nlet lobbyListener;\n\n\n\nfunction addPlayerToLobby(player_name, url) {\n    let player_id = player_name.replace(/\\s/g, '_');\n\n    return firebase.firestore().collection('lobby').doc(player_id).set({\n        playerName: player_name,\n        playerId: player_id,\n        imgURL: url,\n        ready: false\n    })\n        .catch(function (error) {\n            console.error('Error adding a player to the lobby', error);\n        });\n}\n\nfunction stopListeningToLobby() {\n    if (lobbyListener !== undefined) {\n        lobbyListener();\n    }\n}\n\nfunction ListenToPlayersInLobby(callback) {\n    lobbyListener = firebase.firestore().collection(\"lobby\").onSnapshot(function (querySnapshot) {\n        var playersInLobby = [];\n        querySnapshot.forEach(function (doc) {\n            playersInLobby.push(doc.data());\n        });\n        callback(playersInLobby)\n    }, function onError(error) {\n        console.error(\"Error listening to lobby: \", error);\n    });\n}\n\nasync function getPlayersInLobby() {\n    var playersInLobby = [];\n    await firebase.firestore().collection(\"lobby\").get().then(querySnapshot => {\n        querySnapshot.forEach(function (doc) {\n            playersInLobby.push(doc.data());\n        });\n    });\n    console.log('Players', playersInLobby);\n    return playersInLobby;\n}\n\nfunction getPlayersInGame(game_id) {\n    return firebase.firestore().collection(\"games\").doc(game_id).get();\n}\n\nfunction removePlayerFromLobby(player_id) {\n    firebase.firestore().collection(\"lobby\").doc(player_id).delete().then(function () {\n        console.log(\"Player succesfully removed!\");\n    }).catch(function (error) {\n        console.error(\"Error removing lobby: \", error);\n    });\n}\n\nfunction removePlayerFromGame(game_id, player_id) {\n\n    getPlayersInGame(game_id)\n        .then(function (game) {\n            let players = game.players;\n            let new_players = [];\n            players.forEach(player => {\n                if (player.playerId !== player_id) {\n                    new_players.push(player);\n                }\n            });\n            firebase.firestore().collection('games').doc(game_id).set({\n                players: new_players\n            })\n                .then(function (docRef) {\n                    console.log(\"Successfully removed the player with id: \", player_id);\n                })\n                .catch(function (error) {\n                    console.error('Error removing the player with id', player_id, \" error: \", error);\n                });\n        })\n}\n\n\nfunction removePlayersInLobby(playersInLobby) {\n    playersInLobby.forEach(function (player) {\n        removePlayerFromLobby(player.playerId);\n    });\n}\n\nfunction addPlayersToNewGame(playersInLobby) {\n    firebase.firestore().collection('games').add({\n        players: playersInLobby\n    })\n        .then(function (docRef) {\n            console.log(\"Successfully added players to newly created game with ID: \", docRef.id);\n            return playersInLobby;\n        })\n        .catch(function (error) {\n            console.error('Error adding players to new game', error);\n        });\n}\n\nfunction createNewGame() {\n    return getPlayersInLobby()\n        .then(function (lobby) {\n            console.log('lobby :', lobby);\n            var playersInLobby = [];\n            lobby.forEach(function (doc) {\n                playersInLobby.push(doc.data());\n            });\n            console.log(\"players in lobby:\", playersInLobby);\n            return playersInLobby;\n        })\n        .then(addPlayersToNewGame)\n        .then(removePlayersInLobby)\n        .catch(function (error) {\n            console.error(\"Error creating a new game:\", error);\n        });\n\n}\n\nfunction setPlayerReadyStatus(player_id, status) {\n    firebase.firestore()\n        .collection('lobby')\n        .doc(player_id)\n        .update({\n            ready: status\n        })\n        .catch((error)=>{\n            console.error('Error setting the player ready status', error);\n        });\n\n}\n\nfunction createFakeLobby() {\n    addPlayerToLobby(\"DJ COW\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/0/06/MushCow2.jpeg/revision/latest?cb=20190803151753');\n    addPlayerToLobby(\"Bengt\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/e/e7/4C2C755B-FB01-4351-886E-077F5B03CF16.jpeg/revision/latest?cb=20190811175416');\n    addPlayerToLobby(\"Sven\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/d/dd/Sven.png/revision/latest?cb=20191130204116');\n    addPlayerToLobby(\"Sven's BF\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/b/ba/SvenYellow.jpeg/revision/latest?cb=20190814205003');\n    addPlayerToLobby(\"Water Sheep\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/d/db/Water_Sheep%27s_Return.png/revision/latest?cb=20191129235246');\n    addPlayerToLobby(\"Ulla Britta\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/6/6d/BCBBA22C-0452-4B35-8C67-52F8345D734F.jpeg/revision/latest?cb=20190805181119');\n    addPlayerToLobby(\"Flip Flop\", 'https://vignette.wikia.nocookie.net/pewdiepieminecraft/images/c/c7/Flip_Flop.jpeg/revision/latest?cb=20190922230718');\n}\n\n// Signs-in Friendly Chat.\nfunction signIn() {\n    // Sign into Firebase using popup auth & Google as the identity provider.\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n}\n\n// Signs-out of Friendly Chat.\nfunction signOut() {\n    // Sign out of Firebase.\n    firebase.auth().signOut();\n}\n\n// Initiate Firebase Auth.\nfunction initFirebaseAuth() {\n    // Listen to auth state changes.\n    firebase.auth().onAuthStateChanged(authStateObserver);\n}\n\n// Triggers when the auth state change for instance when the user signs-in or signs-out.\nfunction authStateObserver(user) {\n    if (user) { // User is signed in!\n        console.log({user}, ' signed in');\n    } else { // User is signed out!\n\n    }\n}\n\n// TODO: any functions to handle the end of a game?\n\n\n\n\n\n\nexport {\n    createNewGame,\n    addPlayerToLobby,\n    createFakeLobby,\n    ListenToPlayersInLobby,\n    getPlayersInLobby,\n    setPlayerReadyStatus,\n    stopListeningToLobby,\n    signIn,\n    signOut,\n    initFirebaseAuth\n};\n"]},"metadata":{},"sourceType":"module"}