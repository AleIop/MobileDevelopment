{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nlet booleanThatOscarWants = false; // Signs-in Friendly Chat.\n\nfunction signIn() {\n  // Sign into Firebase using popup auth & Google as the identity provider.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n} // Signs-out of Friendly Chat.\n\n\nfunction signOut() {\n  // Sign out of Firebase.\n  firebase.auth().signOut();\n} // Initiate Firebase Auth.\n\n\nfunction initFirebaseAuth() {\n  // Listen to auth state changes.\n  firebase.auth().onAuthStateChanged(authStateObserver);\n  console.log('auth: ', firebase.auth().currentUser);\n} // Triggers when the auth state change for instance when the user signs-in or signs-out.\n\n\nfunction authStateObserver(user) {\n  if (user) {\n    // User is signed in!\n    console.log({\n      user\n    }, ' signed in');\n    booleanThatOscarWants = true;\n  } else {\n    // User is signed out!\n    console.log({\n      user\n    }, ' signed out');\n    booleanThatOscarWants = false;\n  }\n}\n\nfunction getUserProps() {\n  let promise = new Promise((resolve, reject) => {\n    var user = firebase.auth().currentUser;\n    console.log('Current user: ', {\n      user\n    });\n    if (user) resolve({\n      email: user.email,\n      uid: user.uid,\n      name: user.displayName,\n      pic: user.photoURL\n    });\n  });\n  return promise;\n}\n\nexport { signIn, signOut, initFirebaseAuth, getUserProps };","map":{"version":3,"sources":["/Users/Alessandro/Documents/GitHub/mobut-project/src/components/firebase-authentication.component.js"],"names":["firebase","booleanThatOscarWants","signIn","provider","auth","GoogleAuthProvider","signInWithPopup","signOut","initFirebaseAuth","onAuthStateChanged","authStateObserver","console","log","currentUser","user","getUserProps","promise","Promise","resolve","reject","email","uid","name","displayName","pic","photoURL"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP;AAEA,IAAIC,qBAAqB,GAAG,KAA5B,C,CAEA;;AACA,SAASC,MAAT,GAAkB;AACd;AACA,MAAIC,QAAQ,GAAG,IAAIH,QAAQ,CAACI,IAAT,CAAcC,kBAAlB,EAAf;AACAL,EAAAA,QAAQ,CAACI,IAAT,GAAgBE,eAAhB,CAAgCH,QAAhC;AACH,C,CAED;;;AACA,SAASI,OAAT,GAAmB;AACf;AACAP,EAAAA,QAAQ,CAACI,IAAT,GAAgBG,OAAhB;AACH,C,CAED;;;AACA,SAASC,gBAAT,GAA4B;AACxB;AACHR,EAAAA,QAAQ,CAACI,IAAT,GAAgBK,kBAAhB,CAAmCC,iBAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBZ,QAAQ,CAACI,IAAT,GAAgBS,WAAtC;AACA,C,CAED;;;AACA,SAASH,iBAAT,CAA2BI,IAA3B,EAAiC;AAC7B,MAAIA,IAAJ,EAAU;AAAE;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACE,MAAAA;AAAD,KAAZ,EAAoB,YAApB;AACAb,IAAAA,qBAAqB,GAAG,IAAxB;AACG,GAHD,MAGO;AAAE;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACE,MAAAA;AAAD,KAAZ,EAAoB,aAApB;AACAb,IAAAA,qBAAqB,GAAG,KAAxB;AACG;AACJ;;AAED,SAASc,YAAT,GAAwB;AACvB,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,QAAIL,IAAI,GAAGd,QAAQ,CAACI,IAAT,GAAgBS,WAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B;AAACE,MAAAA;AAAD,KAA9B;AACA,QAAGA,IAAH,EAASI,OAAO,CAAC;AAChBE,MAAAA,KAAK,EAAEN,IAAI,CAACM,KADI;AAEhBC,MAAAA,GAAG,EAAEP,IAAI,CAACO,GAFM;AAGhBC,MAAAA,IAAI,EAAER,IAAI,CAACS,WAHK;AAIhBC,MAAAA,GAAG,EAAEV,IAAI,CAACW;AAJM,KAAD,CAAP;AAMT,GATa,CAAd;AAUA,SAAOT,OAAP;AACA;;AAED,SACCd,MADD,EAEIK,OAFJ,EAGCC,gBAHD,EAICO,YAJD","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nlet booleanThatOscarWants = false;\n\n// Signs-in Friendly Chat.\nfunction signIn() {\n    // Sign into Firebase using popup auth & Google as the identity provider.\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n}\n\n// Signs-out of Friendly Chat.\nfunction signOut() {\n    // Sign out of Firebase.\n    firebase.auth().signOut();\n}\n\n// Initiate Firebase Auth.\nfunction initFirebaseAuth() {\n    // Listen to auth state changes.\n\tfirebase.auth().onAuthStateChanged(authStateObserver);\n\tconsole.log('auth: ', firebase.auth().currentUser);\n}\n\n// Triggers when the auth state change for instance when the user signs-in or signs-out.\nfunction authStateObserver(user) {\n    if (user) { // User is signed in!\n\t\tconsole.log({user}, ' signed in');\n\t\tbooleanThatOscarWants = true;\n    } else { // User is signed out!\n\t\tconsole.log({user}, ' signed out');\n\t\tbooleanThatOscarWants = false;\n    }\n}\n\nfunction getUserProps() {\n\tlet promise = new Promise((resolve, reject) => {\n\t\tvar user = firebase.auth().currentUser;\n\t\tconsole.log('Current user: ', {user});\n\t\tif(user) resolve({ \n\t\t\temail: user.email, \n\t\t\tuid: user.uid,\n\t\t\tname: user.displayName,\n\t\t\tpic: user.photoURL\n\t\t});\n\t});\n\treturn promise;\n}\n\nexport {\n\tsignIn,\n    signOut,\n\tinitFirebaseAuth,\n\tgetUserProps\n};"]},"metadata":{},"sourceType":"module"}